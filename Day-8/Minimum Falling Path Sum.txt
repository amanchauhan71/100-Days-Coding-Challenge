931. Minimum Falling Path Sum


Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.

 

Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
The falling path with the smallest sum is [1,4,7], so the answer is 12.



class Solution {
    public int minFallingPathSum(int[][] A) {
        
        int[][] path = new int[A.length][A[0].length];
       
       int val1=Integer.MAX_VALUE,val2=Integer.MAX_VALUE,val3=Integer.MAX_VALUE;
        int min_val , min_cost=Integer.MAX_VALUE;
        
        for(int i =0 ; i< path[0].length;i++){
            
            path[0][i]=A[0][i];
        }
        for(int i =1 ; i<path.length ; i++){
            
            for(int j=0 ; j<path[i].length ; j++){
                
                if(((i-1)>-1) && (i-1)<path.length && ((j-1)>-1) && (j-1)<path[0].length){
                    val1=path[i-1][j-1]+A[i][j];
                 
                }
                
                
                if(((i-1)>-1) && (i-1)<path.length &&   (j<path[0].length)){
                     val2=path[i-1][j]+A[i][j];
                  
                }
                
                
                
                if(((i-1)>-1) && (i-1) < path.length &&  (j+1)<path[0].length){
                     val3=path[i-1][j+1]+A[i][j];

                }
                
                min_val= Math.min(val1,val2);
                min_val=Math.min(min_val,val3);
                path[i][j]=min_val;
              
            }
        
             val1=Integer.MAX_VALUE;
             val2=Integer.MAX_VALUE;
             val3=Integer.MAX_VALUE;
        }
        for(int i=0 ; i<path[0].length;i++){
            if(min_cost>path[path[0].length-1][i])
                min_cost=path[path[0].length-1][i];
        }
        return min_cost;
    }
}