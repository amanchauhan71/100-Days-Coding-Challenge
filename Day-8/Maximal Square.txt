221. Maximal Square

Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4





class Solution {
    public int maximalSquare(char[][] matrix) {
        
        if(matrix.length==0)
            return 0;
        
        if(matrix.length==1 && matrix[0].length==1 && matrix[0][0]=='1')
            return 1;
        else if (matrix.length==1 && matrix[0].length==1 && matrix[0][0]=='0')
                return 0 ;
        int[][] square = new int[matrix.length+1][matrix[0].length+1];
       
        int max_val=0;
        
       
        for(int i =1 ; i<square.length ; i++){
            
            for(int j=1 ; j<square[i].length;j++){
         
                if(matrix[i-1][j-1]=='1'){ 
                  
                    square[i][j] = Math.min(square[i-1][j-1],square[i][j-1]);
                     
                    square[i][j]= Math.min(square[i][j],square[i-1][j])+1;
                    
                    if(max_val < square[i][j]){
                        max_val=square[i][j];
                     
                    }
                      
                }
                
            }
        }
        
        return max_val*max_val;
        
    }
}