1380. Lucky Numbers in a Matrix


Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column


class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        
          int  maxi=Integer.MAX_VALUE ;
        List<Integer> arr = new ArrayList<Integer>();
         List<Integer> arr1 = new ArrayList<Integer>();
        
         for (int i = 0; i < matrix.length; ++i) {
             
            for(int j = 0; j < matrix[i].length; ++j) {
                        
                    
                    
                if(maxi>matrix[i][j])
                    maxi=matrix[i][j];
                  
            
            }
             arr.add(maxi);
             
             maxi=Integer.MAX_VALUE;
         }
        
       
        maxi=Integer.MIN_VALUE;
        
            for (int i = 0; i < matrix[0].length; ++i) {
            for(int j = 0; j < matrix.length; ++j) {
                        
                    
                    
                if(maxi<matrix[j][i])
                    maxi=matrix[j][i];
                  
            
            }
            
                if(arr.contains(maxi)==true){
                    arr1.add(maxi);
                    return arr1;
                }
                   
             maxi=Integer.MIN_VALUE;
         }
        
        return arr1;
    }
}