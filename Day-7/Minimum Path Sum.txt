64. Minimum Path Sum


Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1?3?1?1?1 minimizes the sum.



import java.util.*;

class Solution {
    public int minPathSum(int[][] grid) {
        
        int[][] cost = new int[grid.length][grid[0].length];
        
        cost[0][0]=grid[0][0];
        
        for(int i = 1 ; i<grid.length ; i++){
            
            cost[i][0] = cost[i-1][0] + grid[i][0];
            
        }
        
        for(int j = 1 ; j<grid[0].length ; j++){
             
            cost[0][j]= cost[0][j-1] + grid[0][j];
            
        }
        
        for(int i = 1 ; i < grid.length ; i++){
            
            for(int j  = 1 ; j< grid[0].length ; j++){
                
                cost[i][j]=Math.min(cost[i][j-1],cost[i-1][j]) + grid[i][j];
            }
        }
        
        return cost[grid.length-1][grid[0].length-1];
    }
}