1356. Sort Integers by The Number of 1 Bits




Given an integer array arr. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the sorted array.

 

Example 1:

Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.
[1,2,4,8] all have 1 bit.
[3,5,6] have 2 bits.
[7] has 3 bits.
The sorted array by bits is [0,1,2,4,8,3,5,6,7]







import java.util.*;
class Solution {
    public int[] sortByBits(int[] arr) {
        
        
        Integer[] t = new Integer[arr.length];
        for (int i = 0; i < t.length; i++) t[i] = arr[i];        

        Arrays.sort(t, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                int bitComparision = countSetBits(a) - countSetBits(b);
                if (bitComparision == 0) return a - b;
                return bitComparision;
            }
        });
        
        for (int i = 0; i < t.length; i++) arr[i] = t[i];
        return arr;
    }
            
        
       
            
    
    public int countSetBits(int num){
        int count=0;
        while(num!=0){
            
            count++;
            num=num & (num-1);
        }
        
        return count;
    }
    
}