
969. Pancake Sorting


Given an array of integers A, We need to sort the array performing a series of pancake flips.

In one pancake flip we do the following steps:

Choose an integer k where 0 <= k < A.length.
Reverse the sub-array A[0...k].
For example, if A = [3,2,1,4] and we performed a pancake flip choosing k = 2, we reverse the sub-array [3,2,1], so A = [1,2,3,4] after the pancake flip at k = 2.

Return an array of the k-values of the pancake flips that should be performed in order to sort A. Any valid answer that sorts the array within 10 * A.length flips will be judged as correct.

 

Example 1:

Input: A = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: A = [3, 2, 4, 1]
After 1st flip (k = 4): A = [1, 4, 2, 3]
After 2nd flip (k = 2): A = [4, 1, 2, 3]
After 3rd flip (k = 4): A = [3, 2, 1, 4]
After 4th flip (k = 3): A = [1, 2, 3, 4], which is sorted.
Notice that we return an array of the chosen k values of the pancake flips.




class Solution {
    public List<Integer> pancakeSort(int[] A) {
        List<Integer> finalArray = new ArrayList<Integer>() ;
        for(int k=0 ; k<A.length ; k++){
            
            int largestValue=largest(A,A.length-k);
            //System.out.println(A[largestValue]);
            
            finalArray.add(largestValue+1);
            reverse(A,largestValue+1);
            finalArray.add(A.length-k);
            reverse(A,A.length-k);
            
        }
        
        return finalArray;
        
    }
    
    public static void reverse(int[] array,int n){
        
        for(int i=0; i<(n/2); i++){
            int temp = array[i];
            array[i] = array[n -i -1];
            array[n -i -1] = temp;
        }
        
      // System.out.println(Arrays.toString(array));
       
    }
    
    public int largest(int[] array,int n){
        int temp=Integer.MIN_VALUE;
        int val=-1;
        for(int i=0 ; i<n ; i++){
            
            if(temp<array[i]){
                temp=array[i];
                val=i;
            }
            
          
        }
        //System.out.println(n);
          return val;
    }
}